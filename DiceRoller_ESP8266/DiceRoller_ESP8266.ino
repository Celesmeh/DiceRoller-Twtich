
//********************************************************************************************************
// Libs to bring
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ESP8266TrueRandom.h>
#include "AdafruitIO_WiFi.h"

//********************************************************************************************************
// define OLED info
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels
#define OLED_RESET     -1

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

//********************************************************************************************************
//Adafruit IO shit`
#define WIFI_SSID "Dovahkiin"
#define WIFI_PASS "FusRoDah"
#define IO_USERNAME  "Celesmeh"
#define IO_KEY       "aio_KPyw81v7Al4VIe60GCFSkMt6Cxf1"
AdafruitIO_WiFi io(IO_USERNAME, IO_KEY, WIFI_SSID, WIFI_PASS);


AdafruitIO_Feed *diceT = io.feed("diceType");
AdafruitIO_Feed *diceR = io.feed("diceRoll");
//********************************************************************************************************
//Define+Variables

#define menu 6
int results[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
bool Next = HIGH;
bool Dice = HIGH;
bool diceNum = HIGH;
String temp;
char currentPrintOut[10];
const int menuSize = 7;
byte menuItems[menuSize];
int sum = 0;
int currMenu = 0;
int rolling = currMenu + 1;
int dArray = (menuItems[currMenu]);
int roll = ESP8266TrueRandom.random(1, (menuItems[currMenu] + 1));
int animationDelay = 200; //So that's 5 frames per second
long randNum;
int button1 = 14;
int button2 = 12;
int button3 = 13;
int tSwitch = 16;
int switchState = 0;
int diceMulti = 1;


//********************************************************************************************************
// Set it all up pls
void setup() {
  //Begin Serial Connection
  Serial.begin(9600);

  //Connect to adafruit.io
  io.connect();
  //add message handler to feeds
  diceT->onMessage(handleDice);
  diceR->onMessage(handleDice);
  //lmk if its connecting
  while (io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println();
  Serial.println(io.statusText());
  menuItems[0] = 2;
  menuItems[1] = 4;
  menuItems[2] = 6;
  menuItems[3] = 8;
  menuItems[4] = 10;
  menuItems[5] = 12;
  menuItems[6] = 20;
  //get feed values
  diceT->get();
  diceR->get();

  //Begin Display

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // setup the OLED
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(1);
  display.drawRect(0, 8, 128, 1, WHITE);
  display.setCursor(18, 1);
  display.println("20 12 10 8 6 4 2"); // write the roll
  drawWel();
  display.display(); // write to display
  pinMode(button1, INPUT_PULLUP); // setup button 1
  pinMode(button3, INPUT_PULLUP); // setup button 3
  pinMode(button2, INPUT_PULLUP); // setup button 2
  pinMode(tSwitch, INPUT_PULLUP); // setup button 4
  pinMode(2, OUTPUT); //led on
  digitalWrite(2, LOW);
}

//********************************************************************************************************
// Loop dis pls

void loop() {

  io.run();

  //Menu Logic ***************************************************************
  if (digitalRead(button1) != Next) {
    Next = !Next;
    delay(50);
    if (!Next) {
      //pressed
      if (currMenu > 0) {
        currMenu--;
      }
      else {
        currMenu =
          menuSize - 1;
      }
      MenuChanged();
      Serial.print (currMenu);
    }
    
  }

  //Dice # Logic ***************************************************************
  if (digitalRead(button2) != diceNum) {
    diceNum = !diceNum;
    delay(50);
    if (!diceNum) {
      //pressed
      if (diceMulti <= 9) {
        diceMulti++;
        Serial.println(diceMulti);
        Serial.print("*****************");
      }
      else {
        diceMulti = 1;
        Serial.println(diceMulti);
      }
      multi();
    }
  }



  //Dice Logic ***************************************************************
  if (digitalRead(button3) != Dice) {
    Dice = !Dice;
    delay(150);
    if (!Dice) {
      delay(50);
      diceT->save(menuItems[currMenu]);
      Serial.print("sending ->Dice Type ");
      diceRoll();
      breakfastSerials();
    }
  }
    //Dice Logic ***************************************************************
  switchState = digitalRead(tSwitch);
  Serial.print(switchState);

}


//********************************************************************************************************
//Button testing

void MenuButton() {
  Serial.println("menu state has changed");
  delay(25);
}
void TestButton() {
  Serial.println("button state has changed");
  delay(25);
}

//********************************************************************************************************
//Dice Utils

void FontDice() {
  display.setTextColor(WHITE);
  display.setTextSize(2);
}

void ClearDice() {
  display.fillRect(5, 9, 128, 23,  BLACK);
}

//********************************************************************************************************
//Dice Feed Handler

void handleDice(AdafruitIO_Data * data) {

  Serial.print("received <- ");
  Serial.print(data->feedName());
  Serial.print(" ");
  Serial.println(data->value());

}

//********************************************************************************************************
//Menu

void MenuChanged() {
  display.clearDisplay();
  display.drawRect(0, 8, 128, 1, WHITE);
  menuBar();
  if (currMenu < 4) {
    display.setCursor(53, 15);
  }
  else {
    display.setCursor(48, 15);
  }
  FontDice();
  temp = String (menuItems[currMenu]);
  temp.toCharArray (currentPrintOut, 10);
  display.print("D");
  display.println(currentPrintOut);
  Serial.println(currentPrintOut); // write the roll
  display.display(); // write to display
  delay(25);
}

////********************************************************************************************************
////Multiplier

void multi() {
  display.setTextSize(1);
  display.setCursor(110, 25);
  display.drawRect(110, 25, 128, 10, BLACK);
  display.fillRect(110, 25, 128, 10, BLACK);
  display.print("x");
  display.print(diceMulti);
  display.display();
}
////********************************************************************************************************
////Sum Function
void diceSum() {
  sum = 0;
  display.setCursor(77, 25);
  display.print("= ");
  for (int i = 1; i <= diceMulti; i++) {
    sum += results[i];
  }
  display.print(sum);
}

////********************************************************************************************************
////Dice Rolls

void diceRoll() {
  int diceRolling = (menuItems[currMenu] + 1);
  display.fillScreen(BLACK); // erase all
  display.drawRect(0, 8, 128, 1, WHITE);
  menuBar();
  dicePic();
  sum = 0;

  //dice rolling
  for (int i = 1; i <= diceMulti; i++) {
    int roll = ESP8266TrueRandom.random(1, diceRolling);
    results[i] = roll;
  }

  switch (diceMulti) {
    case 1:
      // display the dice if no multiplier
      if (results[1] == 1 && menuItems[currMenu] == 20) {
        display.fillScreen(BLACK); // erase all
        menuBar();
        drawSkull();
        FontDice();
        display.setCursor(87, 14);
        display.println(results[1]); //get rekt
        diceR->save(results[1]);
        Serial.print("sending -> Dice Roll ");
      }
      else if (results[1] == 20 && menuItems[currMenu] == 20) {
        display.fillScreen(BLACK); // erase all
        menuBar();
        drawStar();
        FontDice();
        display.setCursor(77, 14);
        display.println(results[1]); // daaamn yuss
        diceR->save(results[1]);
        Serial.print("sending -> Dice Roll ");
      }
      else if (results[1] < 10) {
        //single character number
        FontDice();
        display.setCursor(87, 14);
        display.println(results[1]); // write the roll
        diceR->save(results[1]);
        Serial.print("sending -> Dice Roll ");

      }
      else {
        // dual character number
        FontDice();
        display.setCursor(77, 14);
        display.println(results[1]); // write the roll
        diceR->save(results[1]);
        Serial.print("sending -> Dice Roll ");
      }

      display.display(); // write to display
      break;

    case 2:
      Serial.print(diceMulti);
      display.setTextSize(1);
      display.setCursor(77, 9);
      for (int i = 1; i <= diceMulti; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      diceSum();
      display.display();
      break;

    case 3:
      Serial.print(diceMulti);
      display.setTextSize(1);
      display.setCursor(67, 9);
      for (int i = 1; i <= diceMulti; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      diceSum();
      display.display();
      break;

    case 4:
      Serial.print(diceMulti);
      display.setTextSize(1);
      display.setCursor(60, 9);
      for (int i = 1; i <= diceMulti; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      diceSum();
      display.display();
      break;

    case 5:
      Serial.print(diceMulti);
      display.setTextSize(1);
      display.setCursor(50, 9);
      for (int i = 1; i <= diceMulti; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      diceSum();
      display.display();
      break;

    case 6:
      Serial.print(diceMulti);
      display.setTextSize(1);
      display.setCursor(47, 9);
      for (int i = 1; i <= 5; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      display.setCursor(87, 17);
      for (int i = 5; i < diceMulti; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      diceSum();
      display.display();
      break;

    case 7:
      Serial.print(diceMulti);
      display.setTextSize(1);
      display.setCursor(47, 9);
      for (int i = 1; i <= 5; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      display.setCursor(77, 17);
      for (int i = 5; i < diceMulti; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      diceSum();
      display.display();
      break;

    case 8:
      Serial.print(diceMulti);
      display.setTextSize(1);
      display.setCursor(47, 9);
      for (int i = 1; i <= 5; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      display.setCursor(67, 17);
      for (int i = 5; i < diceMulti; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      diceSum();
      display.display();
      break;

    case 9:
      Serial.print(diceMulti);
      display.setTextSize(1);
      display.setCursor(47, 9);
      for (int i = 1; i <= 5; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      display.setCursor(57, 17);
      for (int i = 5; i < diceMulti; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      diceSum();
      display.display();
      break;
    case 10:
      Serial.print(diceMulti);
      display.setTextSize(1);
      display.setCursor(47, 9);
      for (int i = 1; i <= 5; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      display.setCursor(50, 17);
      for (int i = 5; i < diceMulti; i++) {
        display.print(results[i]);
        display.print(" ");
      }
      diceSum();
      display.display();
      break;

  }
}



//********************************************************************************************************
//Menu Bar

void menuBar() {

  display.setTextSize(1);
  display.drawRect(0, 8, 128, 1, WHITE);
  display.setCursor(18, 1);
  display.println("20 12 10 8 6 4 2");
  int lnStrt = 16;
  int rSize[] = {12, 12, 14, 14, 15, 15, 15};
  int offset[] = {88, 76, 64, 52, 37, 18, 0};
  //  for (int i = 0; i <= 7; i++) {
  //    display.setCursor(offset[i]+lnStrt, 1);
  //    display.println(display.println(num[i]));
  //  }
  display.drawRect(lnStrt + offset[currMenu], 0, rSize[currMenu], 1, WHITE);
  display.fillRect(lnStrt + offset[currMenu], 0, rSize[currMenu], 8, WHITE);
  int curOffset = (offset[currMenu] + 18);
  display.setTextColor(BLACK);
  display.setCursor(curOffset, 1);
  display.println(menuItems[currMenu]);
}

//********************************************************************************************************
//Random Number

void randRoll() {
  randNum = random(1, menuItems[currMenu]);
  if (randNum < 10) {
    //single character number
    FontDice();
    display.setCursor(87, 14);
  }
  else {
    // dual character number
    FontDice();
    display.setCursor(77, 14);
  }
  display.println(randNum ); // write the roll
}

//********************************************************************************************************
//Dice Draws

void dicePic() {
  for (int i = 0; i < 3; i++) {
    int diceDelay = 100;
    diceDraw();
    randRoll();
    display.display();
    delay(diceDelay);
    ClearDice();
    randRoll();
    display.display();
    diceDrawr();
    display.display();
    delay(diceDelay);
    ClearDice();
    diceDraw();
  }
}
//********************************************************************************************************
//Serial Prints Pls

void breakfastSerials() {
  Serial.println("roll");
  Serial.println(roll);
  Serial.println("currMenu");
  Serial.println(currMenu);
  Serial.println("diceArray");
  Serial.println(dArray);
}


//********************************************************************************************************
//Dice img
void drawStar() {
  // store image in EEPROM
  static const unsigned char PROGMEM imExp[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    , 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00
    , 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00
    , 0x00, 0x21, 0xff, 0x80, 0x00, 0x00
    , 0x00, 0x07, 0xff, 0x80, 0x00, 0x00
    , 0x00, 0x0f, 0xff, 0x80, 0x10, 0x00
    , 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00
    , 0x00, 0x3f, 0xff, 0x82, 0x00, 0x00
    , 0x18, 0x3f, 0xff, 0xc0, 0x00, 0x00
    , 0x00, 0x3f, 0xff, 0xc0, 0x18, 0x00
    , 0x00, 0x3f, 0xff, 0xe0, 0x1c, 0x00
    , 0x00, 0x04, 0x1f, 0xf8, 0x00, 0x00
    , 0x03, 0xff, 0xf3, 0xfc, 0x00, 0x00
    , 0x07, 0xff, 0xf9, 0xff, 0x80, 0x00
    , 0x7f, 0xff, 0xfc, 0x7f, 0xf8, 0x00
    , 0xff, 0xff, 0xff, 0x9f, 0xff, 0x80
    , 0xff, 0xff, 0xff, 0xdf, 0xff, 0x00
    , 0xff, 0xff, 0xff, 0x9f, 0xfc, 0x00
    , 0x3f, 0xff, 0xff, 0x3f, 0xf0, 0x00
    , 0x00, 0xff, 0xf0, 0xfe, 0x00, 0x00
    , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  display.drawBitmap(10, 9, imExp, 42, 23, 1); // draw moon
}

void drawSkull() {
  // store image in EEPROM
  static const unsigned char PROGMEM imSku[] = {
    0x00, 0x00, 0xff, 0xc0, 0x00, 0x00
    , 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00
    , 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00
    , 0x00, 0x3f, 0xff, 0xff, 0x00, 0x00
    , 0x00, 0x78, 0x3f, 0x07, 0x80, 0x00
    , 0x00, 0xf8, 0x3f, 0x07, 0xc0, 0x00
    , 0x00, 0xff, 0xf3, 0xff, 0xc0, 0x00
    , 0x00, 0xff, 0xe1, 0xff, 0xc0, 0x00
    , 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00
    , 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00
    , 0x03, 0x87, 0xff, 0xf8, 0x70, 0x00
    , 0x07, 0xc7, 0xff, 0xf8, 0xfc, 0x00
    , 0x07, 0xc3, 0xff, 0xf0, 0xfc, 0x00
    , 0x1f, 0xf8, 0x00, 0x07, 0xfe, 0x00
    , 0x3f, 0xff, 0x80, 0x7f, 0xff, 0x00
    , 0x1e, 0x1f, 0xff, 0xfe, 0x1e, 0x00
    , 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00
    , 0x0e, 0x07, 0xff, 0xfc, 0x1c, 0x00
    , 0x1f, 0xff, 0xc0, 0xff, 0xff, 0x00
    , 0x1f, 0xfc, 0x00, 0x0f, 0xfe, 0x00
    , 0x0f, 0xc0, 0x00, 0x00, 0xfc, 0x00
    , 0x0f, 0xc0, 0x00, 0x00, 0xfc, 0x00
    , 0x07, 0x80, 0x00, 0x00, 0x78, 0x00
  };
  display.drawBitmap(10, 9, imSku, 42, 23, 1); // draw skull
}


//********************************************************************************************************
//Welcome Img

void drawWel() {
  // store image in EEPROM
  static const unsigned char PROGMEM imDice[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    , 0x00, 0x38, 0x00, 0x01, 0xc0, 0x00, 0x3f, 0xc0, 0x00, 0xd6, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00
    , 0x01, 0x86, 0x00, 0x02, 0xa0, 0x00, 0xf0, 0xf0, 0x03, 0x31, 0x80, 0x01, 0x60, 0x00, 0x06, 0x00
    , 0x06, 0x00, 0x80, 0x04, 0x90, 0x01, 0x06, 0x08, 0x1f, 0xff, 0xe0, 0x06, 0x30, 0x00, 0x0f, 0x00
    , 0x18, 0x00, 0x60, 0x18, 0x84, 0x01, 0x04, 0x08, 0x10, 0x68, 0x30, 0x0e, 0x38, 0x00, 0x14, 0x80
    , 0x16, 0x01, 0xa0, 0x20, 0x82, 0x02, 0x04, 0x04, 0x18, 0xc4, 0x30, 0x1c, 0x14, 0x00, 0x24, 0x40
    , 0x11, 0x86, 0x20, 0x40, 0x81, 0x86, 0x04, 0x04, 0x18, 0x82, 0x70, 0x28, 0x0b, 0x00, 0x44, 0x20
    , 0x10, 0x38, 0x20, 0xc0, 0x81, 0x87, 0x0f, 0x1c, 0x15, 0x01, 0x70, 0xfe, 0x3f, 0x80, 0x84, 0x10
    , 0x10, 0x10, 0x20, 0x78, 0x8f, 0x02, 0xe0, 0xf4, 0x16, 0x01, 0xd0, 0xc1, 0xc1, 0x83, 0x04, 0x08
    , 0x10, 0x10, 0x20, 0x17, 0xf6, 0x02, 0x40, 0x28, 0x1f, 0xff, 0xf0, 0x20, 0x82, 0x02, 0x04, 0x04
    , 0x10, 0x10, 0x20, 0x08, 0x88, 0x01, 0x20, 0x48, 0x19, 0x03, 0x60, 0x10, 0x84, 0x01, 0x84, 0x18
    , 0x06, 0x10, 0xc0, 0x06, 0x90, 0x00, 0xa0, 0x50, 0x07, 0x87, 0x80, 0x04, 0x90, 0x00, 0x44, 0x60
    , 0x01, 0x92, 0x00, 0x01, 0xc0, 0x00, 0x3f, 0xc1, 0x80, 0xee, 0x00, 0x02, 0xa0, 0x00, 0x14, 0x80
    , 0x00, 0x38, 0x00, 0x00, 0x80, 0x00, 0x00, 0x07, 0xe0, 0x30, 0x00, 0x00, 0x80, 0x00, 0x0e, 0x00
    , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    , 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00
    , 0x00, 0x01, 0x8c, 0x30, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x02, 0x18, 0x40, 0x00
    , 0x00, 0x00, 0x4f, 0xd0, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x02, 0xf9, 0x80, 0x00
    , 0x00, 0x00, 0x37, 0xa0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x02, 0xf3, 0x00, 0x00
    , 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00
    , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

  };
  display.drawBitmap(0, 10, imDice, 128, 21, 1);
}

//********************************************************************************************************
//Dice Draw

void diceDraw() {
  switch (currMenu) {
    case 0:
      static const unsigned char PROGMEM imd2[] = {
        0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x0f, 0xff, 0xf0, 0x00
        , 0x00, 0xe0, 0x00, 0x07, 0x00
        , 0x07, 0x00, 0x00, 0x00, 0xe0
        , 0x0c, 0x00, 0x00, 0x00, 0x30
        , 0x30, 0x00, 0x00, 0x00, 0x0c
        , 0x20, 0x00, 0x00, 0x00, 0x04
        , 0x20, 0x00, 0x00, 0x00, 0x04
        , 0x20, 0x00, 0x00, 0x00, 0x04
        , 0x30, 0x00, 0x00, 0x00, 0x0c
        , 0x38, 0x00, 0x00, 0x00, 0x1c
        , 0x36, 0x00, 0x00, 0x00, 0x6c
        , 0x31, 0xc0, 0x00, 0x03, 0x8c
        , 0x1d, 0xff, 0xc3, 0xfd, 0x38
        , 0x07, 0x86, 0x18, 0x61, 0xe0
        , 0x01, 0xf6, 0x18, 0x6f, 0x80
        , 0x00, 0x1f, 0xff, 0xf8, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00

      };
      display.drawBitmap(5, 10, imd2, 40, 22, 1); // draw d20
      break;
    case 1:
      static const unsigned char PROGMEM imd4[] = {
        0x00, 0x00, 0x40, 0x00, 0x00
        , 0x00, 0x00, 0xe0, 0x00, 0x00
        , 0x00, 0x01, 0xd8, 0x00, 0x00
        , 0x00, 0x03, 0x8c, 0x00, 0x00
        , 0x00, 0x06, 0x87, 0x00, 0x00
        , 0x00, 0x0c, 0x81, 0x80, 0x00
        , 0x00, 0x18, 0x80, 0xc0, 0x00
        , 0x00, 0x30, 0x00, 0x70, 0x00
        , 0x00, 0x61, 0x00, 0x18, 0x00
        , 0x00, 0xc1, 0x00, 0x0c, 0x00
        , 0x01, 0x81, 0x00, 0x03, 0x00
        , 0x03, 0x00, 0x00, 0x01, 0x80
        , 0x06, 0x02, 0x00, 0x00, 0xe0
        , 0x0c, 0x02, 0x00, 0x00, 0x30
        , 0x18, 0x02, 0x00, 0x00, 0x18
        , 0x0c, 0x02, 0x00, 0x00, 0x0e
        , 0x06, 0x04, 0x00, 0x00, 0xf8
        , 0x01, 0x84, 0x00, 0x1f, 0x00
        , 0x00, 0xc4, 0x03, 0xf0, 0x00
        , 0x00, 0x74, 0x3e, 0x00, 0x00
        , 0x00, 0x1f, 0xc0, 0x00, 0x00
        , 0x00, 0x08, 0x00, 0x00, 0x00
      };
      display.drawBitmap(5, 10, imd4, 40, 22, 1); // draw d20
      break;
    case 2:
      static const unsigned char PROGMEM imd6[] = {
        0x00, 0x00, 0x38, 0x00, 0x00
        , 0x00, 0x01, 0xcf, 0x00, 0x00
        , 0x00, 0x07, 0x01, 0xc0, 0x00
        , 0x00, 0x3c, 0x00, 0x38, 0x00
        , 0x00, 0xe0, 0x00, 0x07, 0x00
        , 0x03, 0x80, 0x00, 0x00, 0xe0
        , 0x1c, 0x00, 0x00, 0x00, 0x38
        , 0x1c, 0x00, 0x00, 0x00, 0x38
        , 0x19, 0x80, 0x00, 0x01, 0x98
        , 0x18, 0x20, 0x00, 0x06, 0x18
        , 0x18, 0x0c, 0x00, 0x18, 0x18
        , 0x18, 0x01, 0x00, 0x60, 0x18
        , 0x18, 0x00, 0x61, 0x00, 0x18
        , 0x18, 0x00, 0x0c, 0x00, 0x18
        , 0x1c, 0x00, 0x04, 0x00, 0x70
        , 0x07, 0x00, 0x04, 0x01, 0xc0
        , 0x01, 0xe0, 0x04, 0x07, 0x00
        , 0x00, 0x38, 0x04, 0x1c, 0x00
        , 0x00, 0x07, 0x04, 0x30, 0x00
        , 0x00, 0x01, 0xc4, 0xc0, 0x00
        , 0x00, 0x00, 0x3f, 0x00, 0x00
        , 0x00, 0x00, 0x0c, 0x00, 0x00
      };
      display.drawBitmap(5, 10, imd6, 40, 22, 1); // draw d20
      break;
    case 3:
      static const unsigned char PROGMEM imd8[] = {
        0x00, 0x60, 0x00, 0x00, 0x00
        , 0x00, 0xff, 0x80, 0x00, 0x00
        , 0x00, 0xe0, 0x7e, 0x00, 0x00
        , 0x01, 0xa0, 0x01, 0xf8, 0x00
        , 0x01, 0x90, 0x00, 0x07, 0xf0
        , 0x03, 0x10, 0x00, 0x00, 0x1e
        , 0x03, 0x10, 0x00, 0x00, 0x1e
        , 0x06, 0x08, 0x00, 0x00, 0x8c
        , 0x04, 0x08, 0x00, 0x0c, 0x0c
        , 0x0c, 0x08, 0x00, 0x60, 0x18
        , 0x18, 0x04, 0x03, 0x00, 0x18
        , 0x18, 0x04, 0x18, 0x00, 0x30
        , 0x30, 0x04, 0xc0, 0x00, 0x30
        , 0x30, 0x0f, 0x00, 0x00, 0x60
        , 0x60, 0xc0, 0x80, 0x00, 0x40
        , 0x78, 0x00, 0x20, 0x00, 0xc0
        , 0x7e, 0x00, 0x08, 0x01, 0x80
        , 0x03, 0xf8, 0x02, 0x01, 0x80
        , 0x00, 0x0f, 0xc0, 0x83, 0x00
        , 0x00, 0x00, 0x3f, 0x33, 0x00
        , 0x00, 0x00, 0x00, 0xfe, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00
      };
      display.drawBitmap(5, 10, imd8, 40, 22, 1); // draw d20
      break;
    case 4:
      static const unsigned char PROGMEM imd10[] = {
        0x00, 0x0c, 0x00, 0x00, 0x00
        , 0x00, 0x1f, 0xe0, 0x00, 0x00
        , 0x00, 0x34, 0x3e, 0x00, 0x00
        , 0x00, 0x64, 0x03, 0xe0, 0x00
        , 0x00, 0xc4, 0x00, 0x1e, 0x00
        , 0x01, 0x84, 0x00, 0x01, 0xf0
        , 0x03, 0x80, 0x00, 0x00, 0x1c
        , 0x03, 0x02, 0x00, 0x00, 0x26
        , 0x06, 0x02, 0x00, 0x00, 0x87
        , 0x0c, 0x02, 0x00, 0x01, 0x06
        , 0x18, 0x03, 0x28, 0x02, 0x0c
        , 0x30, 0x08, 0x00, 0x0c, 0x18
        , 0x60, 0x20, 0x00, 0x08, 0x30
        , 0xc0, 0x80, 0x00, 0x08, 0x60
        , 0x7f, 0x00, 0x00, 0x08, 0xc0
        , 0x38, 0xc0, 0x00, 0x09, 0x80
        , 0x0f, 0x98, 0x00, 0x0b, 0x00
        , 0x00, 0x7f, 0x00, 0x13, 0x00
        , 0x00, 0x07, 0xf0, 0x1e, 0x00
        , 0x00, 0x00, 0x3e, 0x1c, 0x00
        , 0x00, 0x00, 0x03, 0xf8, 0x00
        , 0x00, 0x00, 0x00, 0x10, 0x00
      };
      display.drawBitmap(5, 10, imd10, 40, 22, 1); // draw d20
      break;
    case 5:
      static const unsigned char PROGMEM imd12[] = {
        0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x00, 0xf8, 0x00, 0x00
        , 0x00, 0x07, 0x83, 0xc0, 0x00
        , 0x00, 0x18, 0x30, 0x3c, 0x00
        , 0x00, 0x60, 0x03, 0x03, 0x80
        , 0x01, 0x80, 0x00, 0x70, 0xe0
        , 0x0e, 0x00, 0x00, 0x40, 0xf0
        , 0x18, 0x00, 0x00, 0x80, 0x18
        , 0x38, 0x00, 0x00, 0x80, 0x18
        , 0x68, 0x00, 0x01, 0x00, 0x08
        , 0x64, 0x00, 0x02, 0x00, 0x0c
        , 0x24, 0x00, 0x02, 0x00, 0x0c
        , 0x32, 0x00, 0x04, 0x00, 0x0c
        , 0x32, 0x00, 0x38, 0x00, 0x04
        , 0x11, 0xf0, 0x06, 0x00, 0x0c
        , 0x19, 0x00, 0x01, 0x00, 0x18
        , 0x0d, 0x00, 0x00, 0x80, 0x30
        , 0x07, 0x00, 0x00, 0x20, 0xc0
        , 0x03, 0x00, 0x00, 0x11, 0x80
        , 0x01, 0xc0, 0x00, 0x0f, 0x00
        , 0x00, 0x3e, 0x00, 0x78, 0x00
        , 0x00, 0x01, 0xff, 0x80, 0x00
      };
      display.drawBitmap(5, 10, imd12, 40, 22, 1);
      break;
    case 6:
      static const unsigned char PROGMEM imd20[] = {
        0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x7f, 0xff, 0xfc, 0x00
        , 0x00, 0xff, 0x80, 0x0e, 0x00
        , 0x01, 0xe0, 0xf8, 0x0f, 0x00
        , 0x03, 0xa0, 0x0f, 0x99, 0x80
        , 0x07, 0x20, 0x00, 0xf8, 0xc0
        , 0x0e, 0x20, 0x01, 0xfe, 0x70
        , 0x1c, 0x20, 0x1f, 0x13, 0xb8
        , 0x38, 0x20, 0xf0, 0x10, 0xfc
        , 0x70, 0x37, 0x80, 0x10, 0x1e
        , 0xff, 0xfc, 0x00, 0x10, 0x07
        , 0x60, 0x7c, 0x00, 0x10, 0x0e
        , 0x30, 0x37, 0x80, 0x10, 0x1c
        , 0x18, 0x20, 0xf0, 0x10, 0x78
        , 0x0c, 0x20, 0x1c, 0x11, 0xf0
        , 0x06, 0x20, 0x07, 0x9f, 0x60
        , 0x03, 0x20, 0x00, 0xfc, 0xc0
        , 0x01, 0xa0, 0x03, 0xf9, 0x80
        , 0x00, 0xe0, 0x7e, 0x1b, 0x00
        , 0x00, 0x7f, 0xe0, 0x0e, 0x00
        , 0x00, 0x3f, 0xff, 0xfc, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00
      };
      display.drawBitmap(5, 10, imd20, 40, 22, 1); // draw d20
      break;
  }

}

//********************************************************************************************************
//Dice Draw Rotate
void diceDrawr() {
  switch (currMenu) {
    case 0:
      static const unsigned char PROGMEM imd2r[] = {
        0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x00, 0x0f, 0x80, 0x00
        , 0x00, 0x00, 0x66, 0x60, 0x00
        , 0x00, 0x00, 0x83, 0x30, 0x00
        , 0x00, 0x01, 0x00, 0xb8, 0x00
        , 0x00, 0x02, 0x00, 0xcc, 0x00
        , 0x00, 0x04, 0x00, 0x4c, 0x00
        , 0x00, 0x04, 0x00, 0x6c, 0x00
        , 0x00, 0x08, 0x00, 0x7e, 0x00
        , 0x00, 0x08, 0x00, 0x66, 0x00
        , 0x00, 0x08, 0x00, 0x66, 0x00
        , 0x00, 0x08, 0x00, 0x7e, 0x00
        , 0x00, 0x08, 0x00, 0x66, 0x00
        , 0x00, 0x08, 0x00, 0x44, 0x00
        , 0x00, 0x08, 0x00, 0x7c, 0x00
        , 0x00, 0x04, 0x00, 0x88, 0x00
        , 0x00, 0x04, 0x01, 0x98, 0x00
        , 0x00, 0x02, 0x03, 0xf0, 0x00
        , 0x00, 0x01, 0x06, 0x60, 0x00
        , 0x00, 0x00, 0xcc, 0xc0, 0x00
        , 0x00, 0x00, 0x1f, 0x00, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00
      };
      display.drawBitmap(5, 10, imd2r, 40, 22, 1); // draw d20
      break;
    case 1:
      static const unsigned char PROGMEM imd4r[] = {
        0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x0e, 0x00, 0x00, 0x00
        , 0x00, 0x3b, 0xe0, 0x00, 0x00
        , 0x00, 0xe0, 0x1f, 0x00, 0x00
        , 0x03, 0x80, 0x01, 0xf0, 0x00
        , 0x0e, 0x00, 0x00, 0x0f, 0x80
        , 0x18, 0x00, 0x00, 0x00, 0xf8
        , 0x38, 0x03, 0xff, 0xff, 0xff
        , 0x18, 0x00, 0x00, 0x00, 0x0e
        , 0x0c, 0x00, 0x00, 0x00, 0x38
        , 0x06, 0x00, 0x00, 0x00, 0xe0
        , 0x03, 0x00, 0x00, 0x01, 0x80
        , 0x01, 0x80, 0x00, 0x06, 0x00
        , 0x00, 0x80, 0x00, 0x18, 0x00
        , 0x00, 0xc0, 0x00, 0x60, 0x00
        , 0x00, 0x60, 0x01, 0x80, 0x00
        , 0x00, 0x30, 0x06, 0x00, 0x00
        , 0x00, 0x18, 0x1c, 0x00, 0x00
        , 0x00, 0x0c, 0x70, 0x00, 0x00
        , 0x00, 0x07, 0xc0, 0x00, 0x00
        , 0x00, 0x03, 0x00, 0x00, 0x00

      };
      display.drawBitmap(5, 10, imd4r, 40, 22, 1); // draw d20
      break;
    case 2:
      static const unsigned char PROGMEM imd6r[] = {
        0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x03, 0xf8, 0x00, 0x00
        , 0x00, 0x0e, 0x8f, 0xf0, 0x00
        , 0x00, 0x38, 0x40, 0x1c, 0x00
        , 0x00, 0x60, 0x20, 0x06, 0x00
        , 0x01, 0x80, 0x10, 0x03, 0x00
        , 0x06, 0x00, 0x08, 0x01, 0x80
        , 0x1c, 0x00, 0x04, 0x00, 0xc0
        , 0x70, 0x00, 0x02, 0x00, 0x60
        , 0x60, 0x00, 0x01, 0x00, 0x30
        , 0x60, 0x00, 0x00, 0x80, 0x1c
        , 0x30, 0x00, 0x01, 0x8f, 0x0e
        , 0x18, 0x00, 0x06, 0x00, 0x0e
        , 0x0c, 0x00, 0x18, 0x00, 0x1c
        , 0x06, 0x00, 0x60, 0x00, 0x70
        , 0x07, 0x01, 0x80, 0x01, 0xc0
        , 0x03, 0x06, 0x00, 0x07, 0x00
        , 0x01, 0x98, 0x00, 0x1c, 0x00
        , 0x00, 0xf0, 0x00, 0x70, 0x00
        , 0x00, 0x1f, 0xf9, 0xc0, 0x00
        , 0x00, 0x00, 0x0f, 0x00, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00
      };
      display.drawBitmap(5, 10, imd6r, 40, 22, 1); // draw d20
      break;
    case 3:
      static const unsigned char PROGMEM imd8r[] = {
        0x00, 0x00, 0x07, 0xe0, 0x00
        , 0x00, 0x00, 0x3c, 0xb0, 0x00
        , 0x00, 0x01, 0xe0, 0x98, 0x00
        , 0x00, 0x0f, 0x01, 0x0c, 0x00
        , 0x00, 0x78, 0x01, 0x06, 0x00
        , 0x03, 0xc0, 0x00, 0x03, 0x00
        , 0x1c, 0x00, 0x02, 0x01, 0x80
        , 0xe0, 0x00, 0x02, 0x00, 0xc0
        , 0xc0, 0x00, 0x04, 0x00, 0x70
        , 0xf0, 0x00, 0x04, 0x00, 0x38
        , 0x62, 0x00, 0x04, 0x00, 0x0c
        , 0x30, 0xc0, 0x08, 0x00, 0x06
        , 0x18, 0x18, 0x08, 0x00, 0x03
        , 0x0c, 0x03, 0x10, 0x00, 0x03
        , 0x06, 0x00, 0x70, 0xfe, 0x1f
        , 0x03, 0x00, 0x20, 0x00, 0x78
        , 0x01, 0x80, 0x20, 0x03, 0x80
        , 0x00, 0xc0, 0x40, 0x1c, 0x00
        , 0x00, 0x60, 0x81, 0xe0, 0x00
        , 0x00, 0x31, 0x0f, 0x00, 0x00
        , 0x00, 0x1d, 0x78, 0x00, 0x00
        , 0x00, 0x07, 0x80, 0x00, 0x00
      };
      display.drawBitmap(5, 10, imd8r, 40, 22, 1); // draw d20
      break;
    case 4:
      static const unsigned char PROGMEM imd10r[] = {
        0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x00, 0x7f, 0xff, 0x80
        , 0x07, 0xff, 0x80, 0x31, 0x80
        , 0x0c, 0x00, 0x03, 0x01, 0x80
        , 0x1c, 0x00, 0x18, 0x00, 0xc0
        , 0x18, 0x6b, 0x80, 0x00, 0xc0
        , 0x18, 0x00, 0x80, 0x00, 0xc0
        , 0x0c, 0x00, 0x40, 0x00, 0xe0
        , 0x0c, 0x00, 0x20, 0x00, 0xe0
        , 0x0c, 0x00, 0x20, 0x00, 0xe0
        , 0x04, 0x00, 0x10, 0x00, 0xb0
        , 0x06, 0x00, 0x08, 0x00, 0xb0
        , 0x06, 0x00, 0x04, 0x00, 0xb0
        , 0x02, 0x00, 0x18, 0x70, 0x18
        , 0x03, 0x00, 0x60, 0x00, 0xd8
        , 0x03, 0x01, 0x00, 0x00, 0x58
        , 0x03, 0x04, 0x00, 0x00, 0x70
        , 0x01, 0xb0, 0x00, 0xff, 0xe0
        , 0x01, 0xff, 0xff, 0x00, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00
      };
      display.drawBitmap(5, 10, imd10r, 40, 22, 1); // draw d20
      break;
    case 5:
      static const unsigned char PROGMEM imd12r[] = {
        0x00, 0x01, 0xc0, 0x00, 0x00
        , 0x00, 0x0f, 0x3f, 0xfc, 0x00
        , 0x00, 0x38, 0x00, 0x07, 0x00
        , 0x01, 0xc0, 0x00, 0x03, 0x80
        , 0x03, 0x80, 0x00, 0x02, 0xe0
        , 0x06, 0x30, 0x00, 0x01, 0x30
        , 0x0c, 0x0c, 0x00, 0x01, 0x10
        , 0x18, 0x01, 0x00, 0x38, 0x98
        , 0x30, 0x00, 0x47, 0x00, 0x4c
        , 0x60, 0x00, 0x30, 0x00, 0x26
        , 0x60, 0x00, 0x20, 0x00, 0x16
        , 0x20, 0x00, 0x20, 0x00, 0x1b
        , 0x30, 0x00, 0x40, 0x00, 0x0e
        , 0x18, 0x00, 0x40, 0x00, 0x0e
        , 0x18, 0x00, 0x40, 0x00, 0x18
        , 0x0c, 0x00, 0x80, 0x00, 0x30
        , 0x06, 0x00, 0x80, 0x00, 0xc0
        , 0x07, 0xfd, 0x80, 0x01, 0x80
        , 0x01, 0xc0, 0x0e, 0x07, 0x00
        , 0x00, 0x3f, 0x00, 0x3c, 0x00
        , 0x00, 0x00, 0xff, 0xf0, 0x00
        , 0x00, 0x00, 0x00, 0x00, 0x00
      };
      display.drawBitmap(5, 10, imd12r, 40, 22, 1); // draw d20
      break;
    case 6:
      static const unsigned char PROGMEM imd20r[] = {
        0x00, 0x00, 0x1f, 0x80, 0x00
        , 0x00, 0x01, 0xfd, 0xe0, 0x00
        , 0x00, 0x1f, 0x38, 0xfc, 0x00
        , 0x00, 0xf0, 0x60, 0x67, 0x00
        , 0x0f, 0x00, 0xc0, 0x30, 0xe0
        , 0x0f, 0x03, 0x80, 0x18, 0x38
        , 0x09, 0xe6, 0x00, 0x0c, 0x0e
        , 0x18, 0x3f, 0x00, 0x06, 0x3c
        , 0x18, 0x3f, 0xff, 0xff, 0xec
        , 0x18, 0x76, 0x00, 0x07, 0x8c
        , 0x18, 0xc6, 0x00, 0x07, 0x8c
        , 0x31, 0x83, 0x00, 0x1c, 0xcc
        , 0x37, 0x01, 0x80, 0x30, 0x58
        , 0x3c, 0x01, 0x80, 0x60, 0x78
        , 0x38, 0x00, 0xc0, 0xc0, 0x78
        , 0x3c, 0x00, 0x63, 0x80, 0x38
        , 0x0f, 0xf0, 0x66, 0x00, 0x38
        , 0x03, 0xdf, 0xfc, 0xff, 0xf0
        , 0x00, 0x70, 0x7f, 0x3f, 0x00
        , 0x00, 0x1e, 0x31, 0xf0, 0x00
        , 0x00, 0x03, 0xff, 0x00, 0x00
        , 0x00, 0x00, 0xf0, 0x00, 0x00
      };
      display.drawBitmap(5, 10, imd20r, 40, 22, 1); // draw d20
      break;
  }

}
